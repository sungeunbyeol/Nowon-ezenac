java API
 - Collection(자바의 자료구조)		: java.util
   - 무한한 데이터의 집합
   - Set	: 정렬(X), 재사용(X) 
     - HashSet
     - TreeSet
   - Map	: 정렬(X), 재사용(O)	=> key, value
     - HashMap
     - Hashtable
     - TreeMap(TreeSet을 해서 안해도 되겠다)
   - List	: 정렬(O), 재사용(O)
     - ArrayList
     - LinkedList
     - Vector
※ 유산클래스 : 현재는 사용되지 않지만, 과거에 많이 사용되어
                자료형을 유지하기 위해 알아야 하는 클래스
 - java.lang
   - Wrapper Class
     - Boolean, Byte, Short, Character, Integer, Long, Float, Double
   - String
   - Math
   - StringBuffer, StringBuilder
   - System

 - java.util
   - Collection framework(Set, Map, List...)
   - Date, Calendar

 - java.text
   - SimpleDateFormat
   - DecimalFormat

 - java.util.regex

java GUI
 - java.awt
   - Frame
   - Label : 화면에 텍스트 글자를 출력
   - Button
   - Panel
   - Font
   - Color
   - Checkbox
   - CheckboxGroup
   - Choice
   - List
   - TextField
   - TextArea
   - MenuBar
   - Menu
   - MenuItem
   - CheckboxMenuItem
   - Dialog
   - FileDialog

 - java.awt.event
   - 컴포넌트에 어떠한 행위를 했을때 반응하는 것
   - 이벤트의 시작은 컴포넌트의 메소드
   - 이벤트 실행시킬 메소드 : add~~Listener
   - 이벤트 처리 인터페이스 : ~Listener
   - 인터페이스의 메소드가 2개 이상이면, 구현된 클래스가 존재 : ~Adapter

   - 이벤트 처리 방식
     - interface를 상속받아 클래스를 만들고 그 클래스 객체를 컴포넌트 메소드에 전달
     - class를 상속받아 클래스를 만들고  그 클래스 객체를 컴포넌트 메소드에 전달
     - Frame을 상속받은 클래스에 직접 interface를 상속받고 컴포넌트 메소드에 this로 전달
     - 익명중첩클래스를 만들어 처리


 - Graphics
    - 객체가 만들어 지는 시점 : Frame클래스 실행시
      public void update(Graphics g){
   	//Frame클래스의 Graphic 작업 삭제
	paint(g);
      }
      public void paint(Graphics g){
       	//g객체를 이용하여 그림그리기
      }

   - 객체가 만들어 진 후, Frame의 크기가 변경될때, 실행된다
   - repaint()메소드를 호출할때 실행된다.

 - Canvas : Graphics 작업등을 할때 Frame의 크기를 벗어날 수 있는데.. 이런걸 방지하기 위해
                 Component위에 작업을 해서 하나의 Component로 사용하면 더 효율적이다.
                 이때 사용하는 클래스가 Canvas 클래스이다.


 - javax.swing
  - 기존의 awt는 운영체제의 컴포넌트를 빌려와서 사용하는 것입니다.
     자바 고유의 컴포넌트를 만들어서 사용한다  - swing

 - Frame 화면을 나누어 주는 클래스
   - FlowLayout		: 화면의 윗부분부터 Component를 배치하는 배치관리자
   - GridLayout		: 행과 열이 주어지면 그 행과 열로 나누어서 사용하는 배치관리자
   - BorderLayout	: 동,서,남,북,가운데 나누어 사용하는 배치관리자
   - CardLayout
   - GridBagLayout



java I/O
 - java.io		//file
   - File

   - 1byte 입출력
      - 출력(파일저장)
         - FileOutputStream
         - BufferedOutputStream
         - DataOutputStream

      - 입력(파일에서 꺼내기)
         - FileInputStream
         - BufferedInputStream
         - DataInputStream

   - Text 입출력
     - 출력
        - FileWriter		(콘솔이나 network에서는 OutputStreamWriter)
        - BufferedWriter
        - PrintWriter

     - 입력
        - FileReader		(콘솔이나 network에서는 InputStreamReader)
        - BufferedReader

   - Object 입출력
     - 출력(파일저장)
         - FileOutputStream
         - BufferedOutputStream
         - ObjectOutputStream

      - 입력(파일에서 꺼내기)
         - FileInputStream
         - BufferedInputStream
         - ObjectInputStream

 - java.net	//network : OSI 7계층
   - TCP  :  전화받는거와 동일
     - Server, Client
     - port번호와 ip주소
     - 서버에서 필요한 클래스
       - ServerSocket		: 포트번호 등록
       - Socket		: 통신할때 사용	
     - 클에서 필요한 클래스
       - Socket

   - UDP : 문자와 동일 - byte통신만 가능
     - DatagramPacket
     - DatagramSocket

JDBC - 오라클
 - java.sql

예외처리
 - 예외 : 프로그램에서 오류는 아니고 실행시 나타나는 오류
 - 강제예외 : throw - 예외를 강제로 나타나게 하는 것
 - 예외전가 : throws - 메소드 뒤에 써주고, 이 메소드에 이러한
                       예외발생할 수 있는데 이 예외를 이 메소드를
                       호출한 곳에서 처리할 것이다
 - 예외처리 : try~catch - 예외를 고치겠다는것이 아니라 이러이러한 예외가 발생했다고 알려주는 것

 - 예외클래스 만들기
   1. extends Exception
   2. public String getMessage() 오버라이드

- 멀티스레드
  1. Thread 클래스를 상속 or Runnable 인터페이스를 상속
  2. public void run() 메소드를 오버라이드 해준다
  3. 시작은 start()메소드를 호출하여 실행시켜준다
  4. 객체만들기(day17 - Exam_01.java)

      

10.21 ~ 10.31    11일 - 5일
11.1 발표
11.2 ~ 11.5 SQLD 자격증 공부
11.8 JSP